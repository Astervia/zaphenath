{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Zaphenath Documentation","text":"<p>Zaphenath is a smart contract system for storing confidential data that becomes accessible after a period of user inactivity. It is ideal for digital wills, emergency business data access, and contingency disclosures.</p> <p>This documentation will guide you through everything you need to understand, deploy, and use the Zaphenath contract system.</p>"},{"location":"#what-is-zaphenath","title":"\ud83d\udd10 What is Zaphenath?","text":"<p>Zaphenath allows users to:</p> <ul> <li>Create encrypted data entries (\"keys\") that only they can access</li> <li>Configure access policies based on inactivity timeouts</li> <li>Delegate access and responsibilities to trusted custodians</li> <li>Toggle whether the data is readable before the timeout or only after</li> </ul> <p>It uses Solidity, is designed for Ethereum-compatible networks, and is built using the Foundry development stack.</p>"},{"location":"#documentation-sections","title":"\ud83d\udcda Documentation Sections","text":"<ul> <li>Getting Started: How to install and deploy Zaphenath</li> <li>Contracts: Source-level breakdown of each component</li> <li>Usage: Learn how to interact with the system securely</li> <li>Testing: Understand how the test suite validates behavior</li> <li>Support: Frequently asked questions and help resources</li> </ul>"},{"location":"#tech-stack","title":"\ud83d\udee0 Tech Stack","text":"<ul> <li>Solidity <code>^0.8.20</code></li> <li>Foundry (Forge + Anvil)</li> <li>Ethereum-compatible networks (e.g. Anvil, Sepolia)</li> </ul> <p>\u27a1\ufe0f Get started with the Overview</p>"},{"location":"contracts/custodian/","title":"Custodian Struct","text":"<p>The <code>Custodian</code> struct defines the access role and ping privileges of a user over a specific key. Each key maintains its own set of custodians in a <code>mapping(address =&gt; Custodian)</code>.</p>"},{"location":"contracts/custodian/#definition","title":"\ud83d\udcd8 Definition","text":"<pre><code>struct Custodian {\n    Role role;\n    bool canPing;\n}\n</code></pre>"},{"location":"contracts/custodian/#fields","title":"\ud83d\udd10 Fields","text":"Field Type Description <code>role</code> <code>Role</code> The role assigned to the user (None, Reader, etc.) <code>canPing</code> <code>bool</code> Whether the custodian is allowed to send <code>ping()</code>"},{"location":"contracts/custodian/#context","title":"\ud83d\udcc2 Context","text":"<p>Each <code>KeyData</code> instance includes a mapping:</p> <pre><code>mapping(address =&gt; Custodian) custodians;\n</code></pre> <p>This allows each key to define a custom access policy for multiple users.</p>"},{"location":"contracts/custodian/#use-cases","title":"\ud83d\udee0 Use Cases","text":"<ul> <li>Grant read-only access to a trusted contact after timeout.</li> <li>Allow a co-worker to refresh a ping timer on your behalf.</li> <li>Revoke permissions dynamically using <code>removeCustodian()</code>.</li> </ul>"},{"location":"contracts/custodian/#testing-tips","title":"\ud83e\uddea Testing Tips","text":"<ul> <li>Assign and read back custodian roles and ping flags</li> <li>Attempt unauthorized pings and confirm they revert</li> <li>Ensure only Owners can assign/remove custodians</li> </ul>"},{"location":"contracts/custodian/#related-functions","title":"\ud83d\udd04 Related Functions","text":"<ul> <li><code>setCustodian(...)</code></li> <li><code>removeCustodian(...)</code></li> <li><code>ping(...)</code></li> <li><code>readKey(...)</code></li> </ul> <p>\u27a1\ufe0f Next: KeyData Struct</p>"},{"location":"contracts/keydata/","title":"KeyData Struct","text":"<p>The <code>KeyData</code> struct holds the full state of a single key in the Zaphenath contract. It encapsulates all metadata and access configurations for secure storage.</p>"},{"location":"contracts/keydata/#definition","title":"\ud83d\udcd8 Definition","text":"<pre><code>struct KeyData {\n    address owner;\n    bytes data;\n    uint256 lastPing;\n    uint256 timeout;\n    bool readableBeforeTimeout;\n    mapping(address =&gt; Custodian) custodians;\n    bool exists;\n}\n</code></pre> <p>\u2139\ufe0f The <code>KeyData</code> struct uses an internal mapping, so it cannot be returned or passed directly in external/public functions.</p>"},{"location":"contracts/keydata/#fields","title":"\ud83d\udd10 Fields","text":"Field Type Description <code>owner</code> <code>address</code> Owner of the key <code>data</code> <code>bytes</code> Encrypted or opaque data payload <code>lastPing</code> <code>uint256</code> Timestamp of last <code>ping()</code> <code>timeout</code> <code>uint256</code> Number of seconds before data becomes accessible <code>readableBeforeTimeout</code> <code>bool</code> If true, allows the owner to read data before the timeout <code>custodians</code> <code>mapping(address =&gt; Custodian)</code> Role and ping permission map for external users <code>exists</code> <code>bool</code> Tracks if the key is initialized"},{"location":"contracts/keydata/#design-considerations","title":"\ud83e\udde0 Design Considerations","text":"<ul> <li>Uses nested mappings to support per-user access control.</li> <li><code>readableBeforeTimeout</code> is enforced only for the owner.</li> <li><code>exists</code> avoids accidental reads on uninitialized keys.</li> </ul>"},{"location":"contracts/keydata/#testing-tips","title":"\ud83e\uddea Testing Tips","text":"<ul> <li>Validate default values upon key creation</li> <li>Verify access rules with various custodian combinations</li> <li>Ensure timeout enforcement and <code>ping()</code> logic are working</li> </ul> <p>\u27a1\ufe0f Proceed to Using Roles and Permissions</p>"},{"location":"contracts/role/","title":"Role Enum","text":"<p>The <code>Role</code> enum defines the access level a user has to a key within the Zaphenath system. It is a critical component of the role-based access control mechanism.</p>"},{"location":"contracts/role/#definition","title":"\ud83d\udcd8 Definition","text":"<pre><code>enum Role {\n    None,\n    Reader,\n    Writer,\n    Owner\n}\n</code></pre>"},{"location":"contracts/role/#role-levels","title":"\ud83d\udd10 Role Levels","text":"<p>Each role is associated with an increasing level of access:</p> Role Value Description None 0 No access Reader 1 Can read the key (after timeout or if allowed) Writer 2 Can update and delete the key Owner 3 Full control including assigning custodians <p>Roles are evaluated using ordinal values, so <code>Role.Writer</code> is considered higher than <code>Role.Reader</code>, and so on.</p>"},{"location":"contracts/role/#usage-in-access-control","title":"\ud83d\udee1 Usage in Access Control","text":"<p>Access to sensitive operations is gated using the <code>onlyRoleOrAbove</code> modifier:</p> <pre><code>modifier onlyRoleOrAbove(bytes32 keyId, address owner, Role minimumRole) {\n    ...\n    require(uint8(callerRole) &gt;= uint8(minimumRole), \"Insufficient role\");\n    _;\n}\n</code></pre> <p>This enforces a minimum required role for specific functions.</p>"},{"location":"contracts/role/#testing-tips","title":"\ud83e\uddea Testing Tips","text":"<ul> <li>Verify downgrade (e.g. from Writer to Reader) restricts access</li> <li>Confirm escalation from None to Reader grants read access post-timeout</li> <li>Ensure Owner always bypasses role checks automatically</li> </ul> <p>\u27a1\ufe0f Continue to Custodian Struct</p>"},{"location":"contracts/zaphenath/","title":"Zaphenath Contract","text":"<p>The <code>Zaphenath</code> contract is the core of the system. It enables users to securely store and manage keys with timeout-based privacy and delegated access controls.</p>"},{"location":"contracts/zaphenath/#overview","title":"\ud83d\udcd8 Overview","text":"<p>Each key in Zaphenath is:</p> <ul> <li>Owned by a specific address</li> <li>Identified by a <code>bytes32 keyId</code></li> <li>Associated with encrypted <code>data</code></li> <li>Configured with a <code>timeout</code> and a <code>readableBeforeTimeout</code> flag</li> </ul> <p>Data becomes readable after the timeout has passed unless <code>ping()</code> is called.</p>"},{"location":"contracts/zaphenath/#key-components","title":"\ud83d\udd10 Key Components","text":""},{"location":"contracts/zaphenath/#state","title":"State","text":"<pre><code>mapping(bytes32 =&gt; KeyData) private keys;\n</code></pre> <p>Keys are internally identified by <code>keccak256(abi.encodePacked(owner, keyId))</code> to ensure per-owner uniqueness.</p>"},{"location":"contracts/zaphenath/#events","title":"Events","text":"<ul> <li><code>KeyCreated(bytes32 keyId, address owner)</code></li> <li><code>KeyDeleted(bytes32 keyId)</code></li> <li><code>KeyUpdated(bytes32 keyId)</code></li> <li><code>Pinged(bytes32 keyId, uint256 timestamp)</code></li> <li><code>CustodianUpdated(bytes32 keyId, address user, Role role, bool canPing)</code></li> </ul>"},{"location":"contracts/zaphenath/#modifiers","title":"Modifiers","text":"<ul> <li><code>onlyOwner(keyId, owner)</code></li> <li><code>onlyRoleOrAbove(keyId, owner, minimumRole)</code></li> <li><code>keyExists(keyId, owner)</code></li> </ul>"},{"location":"contracts/zaphenath/#core-functions","title":"Core Functions","text":""},{"location":"contracts/zaphenath/#createkey","title":"<code>createKey(...)</code>","text":"<p>Creates a key with an initial data payload and timeout. Only one key per <code>keyId</code> per owner.</p>"},{"location":"contracts/zaphenath/#readkey","title":"<code>readKey(...)</code>","text":"<p>Allows access based on:</p> <ul> <li>Role of the caller</li> <li>Whether timeout has expired</li> <li>If data is readable before timeout</li> </ul>"},{"location":"contracts/zaphenath/#ping","title":"<code>ping(...)</code>","text":"<p>Refreshes the last activity timestamp. Prevents timeout from triggering.</p>"},{"location":"contracts/zaphenath/#updatekey","title":"<code>updateKey(...)</code>","text":"<p>Allows Writers and Owners to update key metadata and data.</p>"},{"location":"contracts/zaphenath/#deletekey","title":"<code>deleteKey(...)</code>","text":"<p>Removes the key. Only Writer or Owner can perform this action.</p>"},{"location":"contracts/zaphenath/#setcustodian-removecustodian","title":"<code>setCustodian(...)</code> / <code>removeCustodian(...)</code>","text":"<p>Assign or revoke roles and ping permission to external addresses.</p>"},{"location":"contracts/zaphenath/#design-considerations","title":"\ud83e\udde0 Design Considerations","text":"<ul> <li><code>Custodian</code> mappings are stored within each <code>KeyData</code>, allowing per-key delegation.</li> <li>Role escalation is strictly enforced via <code>onlyRoleOrAbove()</code>.</li> <li>All key-related operations are scoped per <code>(owner, keyId)</code> pair.</li> </ul>"},{"location":"contracts/zaphenath/#recommended-tests","title":"\ud83e\uddea Recommended Tests","text":"<ul> <li>Owner creates key and reads it</li> <li>Reader cannot read before timeout</li> <li>Reader reads after timeout</li> <li>Ping resets timeout</li> <li>Custodians with and without ping permission</li> </ul> <p>\u27a1\ufe0f Learn about Role Enum</p>"},{"location":"getting-started/","title":"Overview","text":"<p>Zaphenath is a Solidity-based smart contract system for securely storing and revealing sensitive information after user inactivity. It is designed for use cases like wills, confidential business data, and contingency disclosures.</p> <p>This documentation site provides a complete guide to installing, deploying, and interacting with Zaphenath contracts, including technical specifications and code examples.</p>"},{"location":"getting-started/#key-concepts","title":"Key Concepts","text":""},{"location":"getting-started/#1-key-based-secure-storage","title":"1. Key-Based Secure Storage","text":"<p>Each key is uniquely tied to an owner and contains encrypted data and metadata, such as timeout configuration and access rules.</p>"},{"location":"getting-started/#2-ping-mechanism-for-inactivity","title":"2. Ping Mechanism for Inactivity","text":"<p>The contract uses a ping mechanism to detect user inactivity. If the user fails to send periodic \"alive\" pings, their data becomes readable by assigned custodians.</p>"},{"location":"getting-started/#3-role-based-access-control","title":"3. Role-Based Access Control","text":"<p>Zaphenath defines strict roles:</p> <ul> <li>Owner: Full permissions including management of other users.</li> <li>Writer: Can update and delete the key.</li> <li>Reader: Can read data (after timeout or if allowed earlier).</li> <li>None: No permissions.</li> </ul>"},{"location":"getting-started/#4-custodian-delegation","title":"4. Custodian Delegation","text":"<p>Users can assign custodians with specific roles and the ability to send pings on their behalf. This enables secure delegation of responsibilities.</p>"},{"location":"getting-started/#5-privacy-toggle","title":"5. Privacy Toggle","text":"<p>Data can optionally be made visible to the owner before the timeout expires using a <code>readableBeforeTimeout</code> setting.</p>"},{"location":"getting-started/#what-youll-learn","title":"What You'll Learn","text":"<ul> <li>How to deploy and test the Zaphenath contract</li> <li>How to create and manage keys</li> <li>How access and privacy settings work</li> <li>How to simulate inactivity and test timeout behavior</li> </ul>"},{"location":"getting-started/#who-this-is-for","title":"Who This Is For","text":"<ul> <li>Solidity developers building dApps with sensitive data handling</li> <li>Legaltech platforms handling digital wills</li> <li>Businesses needing conditional data exposure based on inactivity</li> </ul> <p>\u27a1\ufe0f Next: Installation Guide</p>"},{"location":"getting-started/deployment/","title":"Deployment","text":"<p>This guide walks you through deploying the Zaphenath contract using Foundry scripts.</p>"},{"location":"getting-started/deployment/#deploying-locally-with-anvil","title":"Deploying Locally with Anvil","text":""},{"location":"getting-started/deployment/#1-start-a-local-testnet","title":"1. Start a local testnet","text":"<pre><code>anvil\n</code></pre> <p>This launches a local Ethereum node with test accounts.</p>"},{"location":"getting-started/deployment/#2-run-the-deploy-script","title":"2. Run the deploy script","text":"<p>In a separate terminal:</p> <pre><code>forge script script/Zaphenath.s.sol \\\n  --broadcast \\\n  --rpc-url http://localhost:8545\n</code></pre> <p>You should see output showing the deployed contract address.</p>"},{"location":"getting-started/deployment/#deploying-to-a-public-testnet-eg-sepolia","title":"Deploying to a Public Testnet (e.g., Sepolia)","text":""},{"location":"getting-started/deployment/#1-set-environment-variables","title":"1. Set environment variables","text":"<p>Export your private key and RPC URL. For safety, use <code>.env</code> in real projects.</p> <pre><code>export PRIVATE_KEY=your_private_key\nexport RPC_URL=https://sepolia.infura.io/v3/YOUR_INFURA_KEY\n</code></pre>"},{"location":"getting-started/deployment/#2-deploy","title":"2. Deploy","text":"<pre><code>forge script script/Zaphenath.s.sol \\\n  --broadcast \\\n  --rpc-url $RPC_URL \\\n  --private-key $PRIVATE_KEY\n</code></pre>"},{"location":"getting-started/deployment/#deployment-output","title":"Deployment Output","text":"<p>After deployment, Foundry logs the contract address. Save it for contract interactions.</p>"},{"location":"getting-started/deployment/#troubleshooting","title":"Troubleshooting","text":"<ul> <li>Missing console logs? Ensure you're using <code>console.log</code> from <code>forge-std</code>.</li> <li>Contract not found? Verify your paths in <code>import</code> and <code>foundry.toml</code>.</li> <li>Network errors? Make sure RPC URLs and keys are correctly set.</li> </ul> <p>\u27a1\ufe0f Next: Zaphenath Contract Details</p>"},{"location":"getting-started/installation/","title":"Installation","text":"<p>This page guides you through setting up the Zaphenath project using the Foundry toolchain.</p>"},{"location":"getting-started/installation/#prerequisites","title":"Prerequisites","text":"<ul> <li>Git installed</li> <li>Foundry installed:</li> </ul> <pre><code>curl -L https://foundry.paradigm.xyz | bash\nfoundryup\n</code></pre> <ul> <li>A modern Solidity-compatible code editor (e.g. VS Code with Solidity plugin)</li> </ul>"},{"location":"getting-started/installation/#clone-the-repository","title":"Clone the Repository","text":"<pre><code>git clone https://github.com/Astervia/zaphenath.git\ncd zaphenath\n</code></pre>"},{"location":"getting-started/installation/#install-dependencies","title":"Install Dependencies","text":"<p>Zaphenath uses <code>forge</code> to manage dependencies.</p> <pre><code>forge install\n</code></pre> <p>If external libraries are used in the future (e.g., OpenZeppelin), you can install them via:</p> <pre><code>forge install openzeppelin/openzeppelin-contracts\n</code></pre>"},{"location":"getting-started/installation/#verify-installation","title":"Verify Installation","text":"<p>Run the tests to ensure everything is working:</p> <pre><code>forge test\n</code></pre> <p>You should see output confirming the test suite ran successfully.</p> <p>\u27a1\ufe0f Next: Deployment Guide</p>"},{"location":"reference/changelog/","title":"\ud83d\uddd2\ufe0f Changelog","text":"<p>All notable changes to Zaphenath will be documented in this file following Keep a Changelog conventions and SemVer.</p>"},{"location":"reference/changelog/#v010-20250601","title":"[v0.1.0] \u2013 2025\u201106\u201101","text":""},{"location":"reference/changelog/#added","title":"Added","text":"<ul> <li>Initial release of the full contract system.</li> <li> <p>Zaphenath.sol \u2013 Core contract for secure, timeout-gated key storage</p> </li> <li> <p>Per-owner key isolation using hashed identifiers</p> </li> <li>Role-based access control (<code>Owner</code>, <code>Writer</code>, <code>Reader</code>, <code>None</code>)</li> <li>Ping-based inactivity tracking to unlock data</li> <li>Per-key custodian delegation with <code>canPing</code> flag</li> <li> <p><code>readableBeforeTimeout</code> toggle for controlled visibility</p> </li> <li> <p>KeyData.sol \u2013 Struct for key metadata and custodian mapping</p> </li> <li>Role.sol \u2013 Enum for RBAC enforcement</li> <li> <p>Custodian.sol \u2013 Custodian role wrapper</p> </li> <li> <p>Full test suite using <code>forge-std</code></p> </li> <li> <p>Role escalation &amp; timeout logic</p> </li> <li>Ping behavior and revert expectations</li> <li> <p>Read/write/delete permission matrix</p> </li> <li> <p>Deployment script with <code>console.log</code> support</p> </li> <li>MkDocs documentation</li> <li>Full developer &amp; usage guides</li> <li>Support &amp; consulting plans</li> <li>Reference examples and lifecycle breakdown</li> </ul>"},{"location":"reference/changelog/#infrastructure","title":"Infrastructure","text":"<ul> <li>Compatible with Foundry stack (Forge, Anvil)</li> <li>Modular contract layout in <code>/src</code></li> <li>Testing in <code>/test</code>, scripts in <code>/script</code></li> <li>Docs build with <code>mkdocs-material</code></li> </ul>"},{"location":"reference/changelog/#documentation","title":"Documentation","text":"<ul> <li>Docs hosted at zaphenath.astervia.tech</li> <li>Includes lifecycle, roles, timeout explanation, and usage examples</li> <li>Consulting and donation plans available under <code>support/</code></li> </ul>"},{"location":"reference/changelog/#breaking-changes","title":"Breaking Changes","text":"<p>N/A \u2013 initial release.</p>"},{"location":"reference/changelog/#known-issues","title":"Known Issues","text":"<ul> <li>Custodian mappings are not enumerable on-chain due to Solidity limitations</li> <li>Key metadata (<code>KeyData</code>) uses internal mappings and cannot be returned directly</li> <li>Contract assumes accurate timestamp behavior (subject to miner control on public nets)</li> </ul> <p>Source available on GitHub. Contributions welcome!</p>"},{"location":"support/consulting/","title":"\ud83d\udee0\ufe0f Zaphenath Consulting Services","text":"<p>We don't license Zaphenath \u2014 we empower you to adapt and scale it. Donations fund our time to help you customize the system to your infrastructure, regulatory needs, and product goals.</p>"},{"location":"support/consulting/#who-is-this-for","title":"\ud83d\udc65 Who is this for?","text":"You are... You need... A legaltech startup On-chain will management, smart contract support A blockchain consultant Timeout-based privacy contracts for client projects A regulated enterprise Auditable access flows, custom custody features, compliance help A DAO or NGO Community-based access models, multisig delegation, secure infra"},{"location":"support/consulting/#what-we-offer","title":"\ud83d\udd27 What we offer","text":""},{"location":"support/consulting/#security-smart-contract-review","title":"\ud83d\udd10 Security &amp; Smart Contract Review","text":"<ul> <li>Custom timeout models and multisig fallback logic</li> <li>Solidity refactoring and upgrades</li> <li>Role escalation audit trails, access recovery mechanisms</li> </ul>"},{"location":"support/consulting/#infrastructure-deployment","title":"\ud83e\uddf1 Infrastructure &amp; Deployment","text":"<ul> <li>Testnet/mainnet pipelines with Foundry and GitHub Actions</li> <li>Custom RPC/network support</li> <li>Secure hosting (IPFS, S3, hybrid)</li> </ul>"},{"location":"support/consulting/#feature-extensions","title":"\ud83e\udde9 Feature Extensions","text":"<ul> <li>ABI-safe hooks and contract events</li> <li>Third-party notarization and timestamping adapters</li> <li>Integration with L2 rollups or multisig wallets</li> </ul>"},{"location":"support/consulting/#onboarding-documentation","title":"\ud83c\udf93 Onboarding &amp; Documentation","text":"<ul> <li>Team workshops (30\u201390 min)</li> <li>Operator handoff playbooks</li> <li>Support channels (Slack, email)</li> </ul>"},{"location":"support/consulting/#engagement-models","title":"\ud83d\udca1 Engagement Models","text":"Tier Donation (USD) Includes Vault \u2265 $200 Up to 4h consulting + Git access to internal forks Sprint Quote Fixed-scope feature (e.g., recovery module, new role logic) Retainer From $300/mo SLA-based support, architecture reviews, roadmap sync <p>All work is delivered under MIT or your preferred OSS license. We collaborate via GitHub, GitLab, or self-hosted platforms.</p>"},{"location":"support/consulting/#how-to-get-started","title":"\ud83d\udcac How to get started","text":"<ol> <li> <p>Email zaphenath@astervia.tech with:</p> </li> <li> <p>A description of your use case</p> </li> <li>Your current stack and desired outcomes</li> <li> <p>Budget/timeline constraints</p> </li> <li> <p>We\u2019ll schedule a free 30-minute discovery call</p> </li> <li>You\u2019ll receive a Statement of Work (SoW) and donation tier suggestion</li> <li>Once donated, we onboard you and begin work</li> </ol> <p>Need a mutual NDA? Send your template, we\u2019ll sign digitally.</p>"},{"location":"support/consulting/#why-donation-based","title":"\ud83e\udd1d Why donation-based?","text":"<ul> <li>Keeps Zaphenath open-source and license-free</li> <li>Avoids vendor lock-in or platform tax</li> <li>Aligns incentives between core devs and user success</li> </ul> <p>\ud83d\udce9 Let\u2019s build trust-minimized systems together: zaphenath@astervia.tech</p>"},{"location":"support/faq/","title":"\u2753 Frequently Asked Questions (FAQ)","text":""},{"location":"support/faq/#what-is-zaphenath","title":"\ud83e\udde9 What is Zaphenath?","text":"<p>Zaphenath is a smart contract system that locks data until a user becomes inactive. It\u2019s designed for wills, fail-safes, and privacy-bound disclosures.</p>"},{"location":"support/faq/#do-i-need-to-use-a-frontend","title":"\ud83d\udee0 Do I need to use a frontend?","text":"<p>No, you can interact directly using Foundry, Ethers.js, or other on-chain tools. However, a frontend improves usability for non-technical users.</p>"},{"location":"support/faq/#how-does-the-timeout-system-work","title":"\u23f3 How does the timeout system work?","text":"<p>Each key has a <code>lastPing</code> and <code>timeout</code>. If <code>block.timestamp - lastPing &gt; timeout</code>, data becomes readable to authorized users.</p>"},{"location":"support/faq/#can-i-test-locally","title":"\ud83e\uddea Can I test locally?","text":"<p>Yes! Use Anvil to simulate a testnet and <code>forge test</code> to run unit tests. See the Testing Overview for details.</p>"},{"location":"support/faq/#can-custodians-be-changed","title":"\ud83d\udd01 Can custodians be changed?","text":"<p>Yes, owners can add, update, or remove custodians dynamically using <code>setCustodian()</code> and <code>removeCustodian()</code>.</p>"},{"location":"support/faq/#who-can-read-the-data","title":"\ud83d\udd10 Who can read the data?","text":"<p>Only the owner (before timeout, if allowed) and authorized custodians (after timeout) with <code>Reader</code> or <code>Writer</code> roles.</p>"},{"location":"support/faq/#is-this-production-ready","title":"\ud83e\uddd1\u200d\ud83d\udcbb Is this production-ready?","text":"<p>The code is well-tested but should be audited before mainnet use in high-stakes environments. We offer consulting for integration and audit prep.</p>"},{"location":"support/faq/#how-do-i-support-the-project","title":"\ud83d\udcb8 How do I support the project?","text":"<p>Check the Support Plans and consider donating via Bitcoin or Lightning. All funds help sustain open-source development.</p>"},{"location":"support/faq/#how-do-i-get-in-touch","title":"\ud83d\udcec How do I get in touch?","text":"<p>Email zaphenath@astervia.tech \u2014 whether it\u2019s a bug report, partnership idea, or consulting request, we\u2019re here to help.</p>"},{"location":"support/plans/","title":"\ud83d\udc8e Support Plans for Zaphenath","text":"<p>Zaphenath is open-source infrastructure for time-gated access control. We don\u2019t sell software \u2014 we develop it collaboratively. Your donation keeps updates coming, tests running, and features evolving. In exchange, we unlock tools and consultancy time based on your support tier.</p> <p>You may also donate outside of fixed plans and still receive thanks and community recognition.</p> Plan Donation (USD) What you unlock Ideal For Seed 10 \u2192 99 USD(\u2248 0.00010 \u2192 0.00099 BTC) \u2022 Community access\u2022 Acknowledgment in CONTRIBUTORS.md Students, small teams, open-source supporters Covenant 100 \u2192 199 USD(\u2248 0.001 \u2192 0.00199 BTC) Everything in Seed plus:\u2022 Docker test environment\u2022 Smart contract review session (30 min)\u2022 Feature request priority dApp builders, blockchain researchers Vault \u2265\u202f200 USD(\u2265 0.002 BTC) Everything in Covenant plus:\u2022 Up to 4h technical consulting (security audit, integration help)\u2022 GitHub repo access to custom forks\u2022 Branding &amp; feature toggles Enterprises, legaltech platforms, on-prem adopters <p>Vault is custom-scoped. Email zaphenath@astervia.tech to start the conversation and get a tailored Statement of Work.</p>"},{"location":"support/plans/#how-to-donate","title":"\ud83d\udcb8 How to Donate","text":""},{"location":"support/plans/#bitcoin-on-chain","title":"Bitcoin (on-chain)","text":"<pre><code>bc1qh0tl3tn9xum66htma92lypj7s6ryr6uymut9sh\n</code></pre>"},{"location":"support/plans/#lightning-instant","title":"Lightning (\u26a1 instant)","text":"<pre><code>evilpantry77@walletofsatoshi.com\n</code></pre> <p>We use the Coinbase BTC-USD daily rate to map donation values.</p>"},{"location":"support/plans/#after-you-donate","title":"After You Donate","text":"<ol> <li>Forward the transaction ID or screenshot to zaphenath@astervia.tech</li> <li>You\u2019ll receive access credentials, bonus files, and a calendar link (if applicable) within 48 hours</li> </ol> <p>Thank you for supporting long-term decentralization.</p>"},{"location":"testing/overview/","title":"Testing Overview","text":"<p>Zaphenath includes a full suite of tests written with the Foundry framework (<code>forge-std</code>). These tests ensure the core behaviors of the system are enforced reliably across key lifecycle operations, access control, and timeout logic.</p>"},{"location":"testing/overview/#test-file","title":"\u2705 Test File","text":"<ul> <li><code>test/Zaphenath.t.sol</code></li> </ul> <p>This file contains unit tests for:</p> <ul> <li>Key creation and uniqueness</li> <li>Ping mechanics</li> <li>Read conditions before and after timeout</li> <li>Custodian assignments and role enforcement</li> <li>Key updates and deletions</li> </ul>"},{"location":"testing/overview/#how-to-run-tests","title":"\ud83d\udd27 How to Run Tests","text":"<pre><code>forge test -vv\n</code></pre> <ul> <li><code>-vv</code> enables verbose output including <code>console.log</code> traces.</li> <li>All tests are self-contained and simulate user addresses using <code>vm.prank()</code>.</li> </ul>"},{"location":"testing/overview/#example-assertion","title":"\ud83d\udd0d Example Assertion","text":"<pre><code>assertEq(data, bytes(\"Soli Deo Gloria\"));\n</code></pre> <p>Used to verify key content and state mutations.</p>"},{"location":"testing/overview/#test-helpers","title":"\ud83e\uddea Test Helpers","text":"<ul> <li><code>vm.warp()</code> to simulate time passing</li> <li><code>vm.expectRevert()</code> to test failure conditions</li> <li><code>vm.prank(address)</code> to impersonate users</li> </ul>"},{"location":"testing/overview/#suggested-additions","title":"\ud83d\udd01 Suggested Additions","text":"<ul> <li>Fuzz tests for timeout edge cases</li> <li>Property tests for role escalations and demotions</li> <li>Integration tests across multiple keys and users</li> </ul> <p>\u27a1\ufe0f Learn about Writing Custom Tests</p>"},{"location":"testing/writing-tests/","title":"Writing Custom Tests","text":"<p>This guide helps you write additional tests for the Zaphenath contract using the Foundry testing framework.</p>"},{"location":"testing/writing-tests/#setup","title":"\ud83e\uddf0 Setup","text":"<p>Tests are located in the <code>test/</code> directory and follow this structure:</p> <pre><code>contract ZaphenathTest is Test {\n    Zaphenath public zaph;\n\n    function setUp() public {\n        zaph = new Zaphenath();\n    }\n}\n</code></pre> <p>Use <code>vm.prank()</code> to simulate calls from different addresses:</p> <pre><code>vm.prank(rachel);\nzaph.createKey(...);\n</code></pre>"},{"location":"testing/writing-tests/#common-tools","title":"\u2705 Common Tools","text":"Tool Description <code>vm.prank()</code> Simulate msg.sender <code>vm.warp()</code> Simulate time passing <code>vm.expectRevert()</code> Expect failure with specific reason <code>console.log()</code> Debug inside tests"},{"location":"testing/writing-tests/#test-ideas","title":"\ud83e\uddea Test Ideas","text":"<ul> <li>\ud83d\udce4 A Writer tries to delete a key</li> <li>\ud83d\udd10 A Reader tries to update a key (should fail)</li> <li>\u23f1 A custodian pings just before timeout</li> <li>\ud83d\udeab Unauthorized user tries to assign custodian</li> </ul>"},{"location":"testing/writing-tests/#example-prevent-non-owner-ping-without-permission","title":"\ud83e\udde9 Example: Prevent Non-Owner Ping Without Permission","text":"<pre><code>function testCustodianCannotPingIfNotAllowed() public {\n    vm.prank(owner);\n    zaph.setCustodian(keyId, owner, jacob, Role.Writer, false);\n\n    vm.prank(jacob);\n    vm.expectRevert(\"Not authorized to ping\");\n    zaph.ping(keyId, owner);\n}\n</code></pre> <p>\ud83e\uddea Don\u2019t forget to run your tests with:</p> <pre><code>forge test -vv\n</code></pre> <p>\u27a1\ufe0f Visit the Support FAQ</p>"},{"location":"usage/examples/","title":"Usage Examples","text":"<p>This page provides practical examples for using the Zaphenath contract in real scenarios, focusing on core operations such as key creation, access control, and timeout behavior.</p>"},{"location":"usage/examples/#create-a-key","title":"\ud83e\uddea Create a Key","text":"<pre><code>vm.prank(rachel);\nzaph.createKey(\"0xabc123\", bytes(\"Top Secret\"), 3 days, true);\n</code></pre> <p>Rachel creates a key that will become public in 3 days unless she pings.</p>"},{"location":"usage/examples/#owner-reads-before-timeout","title":"\ud83d\udc41 Owner Reads Before Timeout","text":"<pre><code>vm.prank(rachel);\nbytes memory data = zaph.readKey(\"0xabc123\", rachel);\n</code></pre> <p>Since <code>readableBeforeTimeout = true</code>, Rachel can read it before timeout.</p>"},{"location":"usage/examples/#reader-cant-read-before-timeout","title":"\ud83d\udd12 Reader Can't Read Before Timeout","text":"<pre><code>vm.prank(rachel);\nzaph.setCustodian(\"0xabc123\", rachel, jacob, Role.Reader, false);\n\nvm.prank(jacob);\nvm.expectRevert(\"Insufficient role\");\nzaph.readKey(\"0xabc123\", rachel);\n</code></pre> <p>Jacob is a Reader, but can't read before the timeout expires.</p>"},{"location":"usage/examples/#read-after-timeout","title":"\u231b Read After Timeout","text":"<pre><code>vm.warp(block.timestamp + 4 days);\n\nvm.prank(jacob);\nbytes memory data = zaph.readKey(\"0xabc123\", rachel);\n</code></pre> <p>After the timeout, Jacob can read the key.</p>"},{"location":"usage/examples/#custodian-pings","title":"\ud83d\udd01 Custodian Pings","text":"<pre><code>vm.prank(rachel);\nzaph.setCustodian(\"0xabc123\", rachel, jacob, Role.Writer, true);\n\nvm.prank(jacob);\nzaph.ping(\"0xabc123\", rachel);\n</code></pre> <p>Jacob keeps the data private by resetting the timeout.</p>"},{"location":"usage/examples/#delete-key","title":"\ud83d\uddd1 Delete Key","text":"<pre><code>vm.prank(rachel);\nzaph.deleteKey(\"0xabc123\", rachel);\n</code></pre> <p>Key is removed permanently.</p> <p>\u27a1\ufe0f Next: Test Coverage</p>"},{"location":"usage/key-lifecycle/","title":"Key Lifecycle","text":"<p>This guide outlines the full lifecycle of a key in the Zaphenath system\u2014from creation to deletion, including access control and timeout transitions.</p>"},{"location":"usage/key-lifecycle/#1-key-creation","title":"\ud83e\udeaa 1. Key Creation","text":"<p>Keys are created using <code>createKey()</code> by the owner.</p> <pre><code>zaph.createKey(keyId, data, timeout, readableBeforeTimeout);\n</code></pre> <ul> <li><code>keyId</code>: A unique identifier per owner (hashed internally)</li> <li><code>data</code>: Encrypted or confidential content</li> <li><code>timeout</code>: Seconds until public access if no ping</li> <li><code>readableBeforeTimeout</code>: If true, owner can read anytime</li> </ul>"},{"location":"usage/key-lifecycle/#2-key-access","title":"\ud83d\udc41 2. Key Access","text":"<p>Reading a key requires:</p> <ul> <li>Caller to be <code>Reader</code>, <code>Writer</code>, or <code>Owner</code></li> <li>Timeout to have passed, unless:</li> <li>Caller is the owner and <code>readableBeforeTimeout</code> is true</li> </ul> <pre><code>zaph.readKey(keyId, owner);\n</code></pre>"},{"location":"usage/key-lifecycle/#3-maintaining-privacy-ping","title":"\ud83d\udd01 3. Maintaining Privacy (Ping)","text":"<p>The owner or a custodian (if allowed) must call <code>ping()</code> periodically to reset the <code>lastPing</code> timestamp:</p> <pre><code>zaph.ping(keyId, owner);\n</code></pre> <p>Failing to ping will result in data becoming readable after the timeout period.</p>"},{"location":"usage/key-lifecycle/#4-managing-custodians","title":"\ud83e\uddd1\u200d\ud83e\udd1d\u200d\ud83e\uddd1 4. Managing Custodians","text":"<p>The owner can assign or remove custodians:</p> <pre><code>zaph.setCustodian(keyId, owner, user, Role.Writer, true);\nzaph.removeCustodian(keyId, owner, user);\n</code></pre>"},{"location":"usage/key-lifecycle/#5-updating-keys","title":"\u270f\ufe0f 5. Updating Keys","text":"<p>Users with <code>Writer</code> or <code>Owner</code> roles can update:</p> <pre><code>zaph.updateKey(keyId, owner, newData, newTimeout, newReadableFlag);\n</code></pre>"},{"location":"usage/key-lifecycle/#6-deleting-keys","title":"\ud83d\uddd1 6. Deleting Keys","text":"<p>Writers and Owners can delete the key permanently:</p> <pre><code>zaph.deleteKey(keyId, owner);\n</code></pre>"},{"location":"usage/key-lifecycle/#7-access-reverts-to-public-post-timeout","title":"\ud83d\udd12 7. Access Reverts to Public (Post-Timeout)","text":"<p>Once timeout expires and no ping has occurred, any custodian with <code>Reader</code> or higher access can read the key.</p> <p>\u27a1\ufe0f See Examples for practical workflows</p>"},{"location":"usage/ping/","title":"Ping Mechanism","text":"<p>The <code>ping()</code> function is a core feature of the Zaphenath contract. It keeps data private by updating the <code>lastPing</code> timestamp and thereby delaying the timeout.</p>"},{"location":"usage/ping/#purpose","title":"\ud83e\udded Purpose","text":"<p>Zaphenath allows data to be accessed only after the owner has been inactive for a certain period. This inactivity is measured as:</p> <pre><code>block.timestamp - lastPing &gt; timeout\n</code></pre> <p>By calling <code>ping()</code>, the owner or an authorized custodian can reset this timer.</p>"},{"location":"usage/ping/#function-signature","title":"\ud83d\udd01 Function Signature","text":"<pre><code>function ping(bytes32 keyId, address owner) external;\n</code></pre>"},{"location":"usage/ping/#who-can-ping","title":"\u2705 Who Can Ping?","text":"<ul> <li>Owner: Always allowed</li> <li>Custodians: Only if <code>canPing</code> was set to <code>true</code> by the owner</li> </ul>"},{"location":"usage/ping/#use-cases","title":"\ud83d\udee0 Use Cases","text":"<ul> <li>Keep private data hidden as long as the user is \"active\"</li> <li>Allow a trusted custodian to maintain activity on behalf of a user</li> <li>Ensure data is only released if truly inactive or incapacitated</li> </ul>"},{"location":"usage/ping/#behavior","title":"\u26a0\ufe0f Behavior","text":"<ul> <li>If a user fails to call <code>ping()</code> and <code>timeout</code> expires, data becomes readable by Readers and Writers</li> <li>Repeated <code>ping()</code> calls extend the private window indefinitely</li> </ul>"},{"location":"usage/ping/#testing-scenarios","title":"\ud83e\uddea Testing Scenarios","text":"<ul> <li>Owner calls <code>ping()</code> \u2192 should update <code>lastPing</code></li> <li>Custodian without ping permission \u2192 call reverts</li> <li>Custodian with ping permission \u2192 call succeeds</li> <li>No <code>ping()</code> and time advances \u2192 <code>readKey()</code> becomes accessible</li> </ul> <p>\u27a1\ufe0f Continue to Key Lifecycle</p>"},{"location":"usage/roles/","title":"Roles and Permissions","text":"<p>Zaphenath uses a role-based access control system to manage interactions with keys. Each role defines the permissions a user has on a specific key, and these roles are enforced per <code>(keyId, owner)</code>.</p>"},{"location":"usage/roles/#roles","title":"\ud83d\udd11 Roles","text":"Role Access Level Capabilities None 0 No access Reader 1 Can read the key after timeout or earlier if allowed Writer 2 Can update key metadata and delete the key Owner 3 Full control including assigning roles and reading before timeout (if enabled)"},{"location":"usage/roles/#custodians","title":"\ud83d\udc65 Custodians","text":"<p>Custodians are external addresses assigned a role and optional ping permission by the key owner.</p> <pre><code>setCustodian(keyId, owner, user, Role.Writer, true);\n</code></pre> <p>This allows for:</p> <ul> <li>Delegated Reading: Readers can view key data after timeout</li> <li>Collaborative Editing: Writers can update/delete the key</li> <li>Inactivity Protection: Custodians with <code>canPing = true</code> can maintain the key\u2019s private state</li> </ul>"},{"location":"usage/roles/#role-checks-in-practice","title":"\u2699\ufe0f Role Checks in Practice","text":"<p>Every function in the contract uses <code>onlyRoleOrAbove</code> to ensure the caller has sufficient privilege:</p> <pre><code>require(uint8(callerRole) &gt;= uint8(minimumRole), \"Insufficient role\");\n</code></pre> <p>The owner always bypasses role checks and is considered highest priority.</p>"},{"location":"usage/roles/#testing-scenarios","title":"\ud83e\uddea Testing Scenarios","text":"<ul> <li>Assign Jacob as Reader \u2192 he should read only after timeout</li> <li>Promote to Writer \u2192 he can now update/delete</li> <li>Demote to None \u2192 he loses all access</li> <li>Add ping permission \u2192 he can extend key privacy</li> </ul> <p>\u27a1\ufe0f Learn about the Ping Mechanism</p>"}]}